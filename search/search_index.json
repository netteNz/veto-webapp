{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Veto API Docs","text":"<p>A modular, scalable backend powering competitive match veto processes for Halo and beyond.</p>"},{"location":"#overview","title":"\ud83d\ude80 Overview","text":"<p>The Veto API is the backend source of truth for veto logic. It provides:</p> <ul> <li>\u2705 Series lifecycle management: create, assign roles, confirm ruleset, reset/undo</li> <li>\u2699\ufe0f TSDMachine state machine: enforces strict turn order for bans and picks</li> <li>\ud83d\uddfa\ufe0f Map &amp; mode registry: CRUD for maps, game modes, and legal combos</li> <li>\ud83d\udcca Action tracking: every ban/pick is recorded and retrievable</li> <li>\ud83e\ude7a Health endpoint: quick system status for monitoring</li> </ul> <p>The frontend consumes these endpoints to render the veto UI and final series layout.</p>"},{"location":"#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>server/\n\u251c\u2500\u2500 veto/\n\u2502   \u251c\u2500\u2500 models.py       # Core models (Series, Map, GameMode, Round, Ban, Action)\n\u2502   \u251c\u2500\u2500 machine_tsd.py  # TSDMachine: enforces ban/pick sequencing\n\u2502   \u251c\u2500\u2500 views.py        # REST API viewsets &amp; custom endpoints\n\u2502   \u251c\u2500\u2500 serializers.py  # DRF serializers (Series, Maps, Actions)\n\u2502   \u2514\u2500\u2500 urls.py         # API routing\n\u2514\u2500\u2500 manage.py\n</code></pre>"},{"location":"#how-it-wires-to-the-frontend","title":"\ud83d\udd17 How It Wires to the Frontend","text":"<ul> <li>The frontend never enforces rules \u2014 it only calls API endpoints.</li> <li>State progression is handled by <code>TSDMachine</code> methods, exposed under <code>/api/series/{id}/...</code>.</li> <li>Every state update returns the current Series state (<code>state</code>, <code>turn</code>, <code>actions</code>) so the client can render the next step.</li> <li>Legal map/mode combinations are provided by <code>/api/maps/</code> and <code>/api/gamemodes/</code>.</li> <li>The SeriesSerializer merges bans, rounds, and actions for a complete veto history in one response.</li> </ul>"},{"location":"#key-endpoints","title":"\ud83d\udce1 Key Endpoints","text":"<ul> <li><code>GET /api/health/</code> \u2192 API health &amp; counts</li> <li><code>GET /api/maps/</code> \u2192 list maps with supported modes</li> <li><code>GET /api/combos/</code> \u2192 list available game modes</li> <li><code>POST /api/series/</code> \u2192 create a new series</li> <li><code>POST /api/series/{id}/action/</code> \u2192 submit ban/pick actions</li> <li><code>POST /api/series/{id}/undo/</code> \u2192 undo last action</li> <li><code>POST /api/series/{id}/reset/</code> \u2192 reset the series</li> </ul>"},{"location":"#tech-stack","title":"\ud83d\udee0\ufe0f Tech Stack","text":"<ul> <li>Django + Django REST Framework \u2014 API &amp; admin</li> <li>transitions \u2014 finite state machine engine</li> <li>SQLite/Postgres \u2014 persistence</li> <li>MkDocs Material \u2014 documentation site</li> </ul>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>API Reference \u2014 Complete endpoint documentation with examples</li> <li>Architecture \u2014 System design and state machine details</li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<ol> <li>Set up the backend: Follow the installation guide in the project README</li> <li>Create test data: Use the admin interface or API to add maps and game modes</li> <li>Start a series: <code>POST /api/series/</code> with team names</li> <li>Execute veto: Follow the ban/pick sequence using the action endpoint</li> <li>View results: Get the complete series state with all actions</li> </ol>"},{"location":"#related-projects","title":"\ud83d\udd17 Related Projects","text":"<p>The Veto API is designed to work with modern frontend frameworks through its REST API interface.</p>"},{"location":"api/","title":"API Reference \u2013 Veto System","text":"<p>This document describes the REST API endpoints for the HCS-style veto system. The API enforces proper ban/pick sequences through a finite state machine and validates all actions server-side.</p>"},{"location":"api/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ul> <li>Base Configuration</li> <li>Authentication</li> <li>Response Format</li> <li>Series Management</li> <li>Veto Actions</li> <li>Administrative Actions</li> <li>Resource Endpoints</li> <li>Error Handling</li> <li>Workflow Examples</li> </ul>"},{"location":"api/#base-configuration","title":"\ud83d\udd27 Base Configuration","text":"<p>Base URL: <code>/api/</code></p> <p>Content-Type: <code>application/json</code></p> <p>Rate Limiting: None (development)</p> <p>API Version: v1</p>"},{"location":"api/#authentication","title":"\ud83d\udd10 Authentication","text":"<p>Currently, the API is publicly accessible for testing and development purposes. </p> <p>Future Implementation: - Token-based authentication - Team-based permissions - Role-based access control</p>"},{"location":"api/#response-format","title":"\ud83d\udce8 Response Format","text":""},{"location":"api/#success-response-structure","title":"Success Response Structure","text":"<pre><code>{\n\"id\": 123,\n\"data\": { /* resource data */ },\n\"meta\": {\n\"timestamp\": \"2025-09-16T14:30:00Z\",\n\"api_version\": \"v1\"\n}\n}\n</code></pre>"},{"location":"api/#error-response-structure","title":"Error Response Structure","text":"<pre><code>{\n\"error\": {\n\"code\": \"INVALID_TRANSITION\",\n\"message\": \"Cannot ban during PICK_WINDOW phase\",\n\"details\": {\n\"current_state\": \"PICK_WINDOW\",\n\"expected_action\": \"pick\",\n\"provided_action\": \"ban\"\n}\n},\n\"meta\": {\n\"timestamp\": \"2025-09-16T14:30:00Z\",\n\"request_id\": \"req_abc123\"\n}\n}\n</code></pre>"},{"location":"api/#series-management","title":"\ud83c\udfae Series Management","text":""},{"location":"api/#create-new-series","title":"Create New Series","text":"<p>POST <code>/api/series/</code></p> <p>Creates a new veto series and initializes the state machine.</p>"},{"location":"api/#request-body","title":"Request Body","text":"<pre><code>{\n\"team_a\": \"Red Dragons\",\n\"team_b\": \"Blue Cobras\",\n\"series_type\": \"Bo5\"  // Optional: \"Bo3\", \"Bo5\", \"Bo7\"\n}\n</code></pre>"},{"location":"api/#response-201-created","title":"Response (201 Created)","text":"<pre><code>{\n\"id\": 42,\n\"team_a\": \"Red Dragons\",\n\"team_b\": \"Blue Cobras\",\n\"state\": \"IDLE\",\n\"series_type\": null,\n\"current_turn\": null,\n\"ban_index\": 0,\n\"round_index\": 0,\n\"created_at\": \"2025-09-16T14:30:00Z\",\n\"actions\": [],\n\"bans\": [],\n\"rounds\": []\n}\n</code></pre>"},{"location":"api/#get-series-details","title":"Get Series Details","text":"<p>GET <code>/api/series/{id}/</code></p> <p>Returns the complete state of a series including all actions, bans, and rounds.</p>"},{"location":"api/#response-200-ok","title":"Response (200 OK)","text":"<pre><code>{\n\"id\": 42,\n\"team_a\": \"Red Dragons\",\n\"team_b\": \"Blue Cobras\",\n\"state\": \"BAN_PHASE\",\n\"series_type\": \"Bo5\",\n\"current_turn\": {\n\"team\": \"A\",\n\"action\": \"BAN\",\n\"kind\": \"OBJECTIVE_COMBO\"\n},\n\"ban_index\": 2,\n\"round_index\": 0,\n\"created_at\": \"2025-09-16T14:30:00Z\",\n\"updated_at\": \"2025-09-16T14:35:00Z\",\n\"actions\": [\n{\n\"id\": 1,\n\"step\": 1,\n\"action_type\": \"ban\",\n\"team\": \"A\",\n\"map\": 5,\n\"mode\": 2,\n\"created_at\": \"2025-09-16T14:31:00Z\"\n}\n],\n\"bans\": [\n{\n\"id\": 1,\n\"order\": 1,\n\"kind\": \"OBJECTIVE_COMBO\",\n\"team\": \"A\",\n\"map\": \"Guardian\",\n\"mode\": \"King of the Hill\"\n}\n],\n\"rounds\": [\n{\n\"id\": 1,\n\"order\": 1,\n\"slot_type\": \"OBJECTIVE\",\n\"picked_by\": null,\n\"map\": null,\n\"mode\": null\n}\n]\n}\n</code></pre>"},{"location":"api/#list-all-series","title":"List All Series","text":"<p>GET <code>/api/series/</code></p> <p>Returns paginated list of all series.</p>"},{"location":"api/#query-parameters","title":"Query Parameters","text":"<ul> <li><code>page</code> (int): Page number (default: 1)</li> <li><code>page_size</code> (int): Items per page (default: 20, max: 100)</li> <li><code>state</code> (string): Filter by state (<code>IDLE</code>, <code>BAN_PHASE</code>, etc.)</li> <li><code>team</code> (string): Filter by team name</li> </ul>"},{"location":"api/#response-200-ok_1","title":"Response (200 OK)","text":"<pre><code>{\n\"count\": 150,\n\"next\": \"/api/series/?page=2\",\n\"previous\": null,\n\"results\": [\n{\n\"id\": 42,\n\"team_a\": \"Red Dragons\",\n\"team_b\": \"Blue Cobras\",\n\"state\": \"BAN_PHASE\",\n\"created_at\": \"2025-09-16T14:30:00Z\"\n}\n]\n}\n</code></pre>"},{"location":"api/#veto-actions","title":"\u2694\ufe0f Veto Actions","text":""},{"location":"api/#submit-action","title":"Submit Action","text":"<p>POST <code>/api/series/{id}/action/</code></p> <p>Submit a veto or map/gametype selection.</p>"},{"location":"api/#request-body_1","title":"Request Body","text":"<pre><code>{\n\"type\": \"veto\",\n\"map\": \"Streets\",\n\"mode\": \"Oddball\"\n}\n</code></pre>"},{"location":"api/#undo-last-action","title":"Undo Last Action","text":"<p>POST <code>/api/series/{id}/undo/</code></p> <p>Undo the most recent action in the series.</p>"},{"location":"api/#reset-series","title":"Reset Series","text":"<p>POST <code>/api/series/{id}/reset/</code></p> <p>Resets the entire series to its initial state.</p>"},{"location":"api/#list-maps","title":"List Maps","text":"<p>GET <code>/api/maps/</code></p> <p>Returns a list of all available maps and supported gametypes.</p>"},{"location":"api/#list-gametypes","title":"List Gametypes","text":"<p>GET <code>/api/gametypes/</code></p> <p>Returns a list of available game modes (e.g. Slayer, CTF, Strongholds).</p>"},{"location":"api/#administrative-actions","title":"\ud83d\udee0 Administrative Actions","text":""},{"location":"api/#force-transition","title":"Force Transition","text":"<p>POST <code>/api/series/{id}/transition/</code></p> <p>Force a state transition (admin use only).</p>"},{"location":"api/#request-body_2","title":"Request Body","text":"<pre><code>{\n\"state\": \"PICK_WINDOW\"\n}\n</code></pre>"},{"location":"api/#error-handling","title":"\u274c Error Handling","text":""},{"location":"api/#client-errors","title":"Client Errors","text":"<ul> <li>400 Bad Request: Invalid input or request format.</li> <li>401 Unauthorized: Authentication required.</li> <li>403 Forbidden: Insufficient permissions.</li> <li>404 Not Found: Resource not found.</li> <li>409 Conflict: Request conflicts with the current state.</li> <li>422 Unprocessable Entity: Invalid state transition.</li> </ul>"},{"location":"api/#server-errors","title":"Server Errors","text":"<ul> <li>500 Internal Server Error: Unexpected server error.</li> <li>503 Service Unavailable: API temporarily unavailable.</li> </ul>"},{"location":"api/#workflow-examples","title":"\ud83d\udd04 Workflow Examples","text":"<ol> <li>Create a Series: <code>POST /api/series/</code></li> <li>Submit Action: <code>POST /api/series/{id}/action/</code></li> <li>Undo Action: <code>POST /api/series/{id}/undo/</code></li> <li>Reset Series: <code>POST /api/series/{id}/reset/</code></li> </ol>"},{"location":"api/#notes","title":"Notes","text":"<p>All action requests are validated by the internal state machine and will return a 422 response if invalid for the current state.</p> <p>Game modes are classified as is_objective: true/false in /gametypes/.</p> <p>Last updated: September 16, 2025</p>"},{"location":"architecture/","title":"Architecture","text":"<p>The Veto API backend enforces an HCS-style veto process using a finite state machine (<code>TSDMachine</code>). All bans/picks are validated at the backend so the frontend only renders and issues API calls.</p>"},{"location":"architecture/#state-lifecycle","title":"\u2699\ufe0f State Lifecycle","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; IDLE\n    IDLE --&gt; SERIES_SETUP: assign_roles\n    SERIES_SETUP --&gt; BAN_PHASE: confirm_tsd\n    BAN_PHASE --&gt; PICK_WINDOW: after_7_bans\n    PICK_WINDOW --&gt; SERIES_COMPLETE: after_final_pick\n    SERIES_COMPLETE --&gt; [*]\n\n    SERIES_SETUP --&gt; ABORTED: reset\n    BAN_PHASE --&gt; ABORTED: reset\n    PICK_WINDOW --&gt; ABORTED: reset\n    ABORTED --&gt; IDLE: restart</code></pre> <ul> <li>IDLE \u2014 fresh series, ready to assign teams</li> <li>SERIES_SETUP \u2014 teams assigned; waiting to confirm Bo3/Bo5/Bo7</li> <li>BAN_PHASE \u2014 executing 7-step ban schedule (Objective combos then Slayer maps)</li> <li>PICK_WINDOW \u2014 teams alternate picks until all rounds are filled</li> <li>SERIES_COMPLETE \u2014 final layout locked and ready for matches</li> <li>ABORTED \u2014 series was reset; can restart from IDLE</li> </ul>"},{"location":"architecture/#ban-schedule-7-steps","title":"\ud83d\udd04 Ban Schedule (7 Steps)","text":"<pre><code>graph TD\n    subgraph \"Objective Combo Bans (Steps 1-5)\"\n        s1[\"Step 1&lt;br/&gt;Team A bans&lt;br/&gt;Objective Combo\"]\n        s2[\"Step 2&lt;br/&gt;Team B bans&lt;br/&gt;Objective Combo\"]\n        s3[\"Step 3&lt;br/&gt;Team A bans&lt;br/&gt;Objective Combo\"]\n        s4[\"Step 4&lt;br/&gt;Team B bans&lt;br/&gt;Objective Combo\"]\n        s5[\"Step 5&lt;br/&gt;Team A bans&lt;br/&gt;Objective Combo\"]\n\n        s1 --&gt; s2 --&gt; s3 --&gt; s4 --&gt; s5\n    end\n\n    subgraph \"Slayer Map Bans (Steps 6-7)\"\n        s6[\"Step 6&lt;br/&gt;Team B bans&lt;br/&gt;Slayer Map\"]\n        s7[\"Step 7&lt;br/&gt;Team A bans&lt;br/&gt;Slayer Map\"]\n\n        s6 --&gt; s7\n    end\n\n    s5 --&gt; s6\n    s7 --&gt; finish[\"Move to&lt;br/&gt;Pick Phase\"]</code></pre> <p>Ban Types: - Objective Combo ban = (Objective Mode + Map) pair \u2014 removes specific mode/map combination - Slayer Map ban = (Map) only \u2014 removes entire map from Slayer pool</p> <p>Pattern: Teams alternate bans with Team A starting and ending the ban phase.</p>"},{"location":"architecture/#round-slots-per-series-type","title":"\ud83c\udfae Round Slots per Series Type","text":""},{"location":"architecture/#bo3-series","title":"Bo3 Series","text":"<p>Objective \u2192 Slayer \u2192 Objective</p>"},{"location":"architecture/#bo5-series","title":"Bo5 Series","text":"<p>Objective \u2192 Slayer \u2192 Objective \u2192 Objective \u2192 Slayer</p>"},{"location":"architecture/#bo7-series","title":"Bo7 Series","text":"<p>Objective \u2192 Slayer \u2192 Objective \u2192 Objective \u2192 Slayer \u2192 Objective \u2192 Slayer</p> <pre><code>flowchart TD\n    subgraph Bo3 [\"Bo3 Series\"]\n        A1[\"Game 1&lt;br/&gt;Objective&lt;br/&gt;(Team B picks)\"] \n        A2[\"Game 2&lt;br/&gt;Slayer&lt;br/&gt;(Team A picks)\"]\n        A3[\"Game 3&lt;br/&gt;Objective&lt;br/&gt;(Team B picks)\"]\n        A1 --&gt; A2 --&gt; A3\n    end\n\n    subgraph Bo5 [\"Bo5 Series\"]\n        B1[\"Game 1&lt;br/&gt;Objective&lt;br/&gt;(Team B picks)\"]\n        B2[\"Game 2&lt;br/&gt;Slayer&lt;br/&gt;(Team A picks)\"]\n        B3[\"Game 3&lt;br/&gt;Objective&lt;br/&gt;(Team B picks)\"]\n        B4[\"Game 4&lt;br/&gt;Objective&lt;br/&gt;(Team A picks)\"]\n        B5[\"Game 5&lt;br/&gt;Slayer&lt;br/&gt;(Team B picks)\"]\n        B1 --&gt; B2 --&gt; B3 --&gt; B4 --&gt; B5\n    end\n\n    subgraph Bo7 [\"Bo7 Series\"]\n        C1[\"Game 1&lt;br/&gt;Objective&lt;br/&gt;(Team B picks)\"]\n        C2[\"Game 2&lt;br/&gt;Slayer&lt;br/&gt;(Team A picks)\"]\n        C3[\"Game 3&lt;br/&gt;Objective&lt;br/&gt;(Team B picks)\"]\n        C4[\"Game 4&lt;br/&gt;Objective&lt;br/&gt;(Team A picks)\"]\n        C5[\"Game 5&lt;br/&gt;Slayer&lt;br/&gt;(Team B picks)\"]\n        C6[\"Game 6&lt;br/&gt;Objective&lt;br/&gt;(Team A picks)\"]\n        C7[\"Game 7&lt;br/&gt;Slayer&lt;br/&gt;(Team B picks)\"]\n        C1 --&gt; C2 --&gt; C3 --&gt; C4 --&gt; C5 --&gt; C6 --&gt; C7\n    end</code></pre> <p>Picking turn rule: odd-numbered games \u2192 Team B picks; even-numbered games \u2192 Team A picks.</p>"},{"location":"architecture/#validation-rules-highlights","title":"\u2705 Validation Rules (Highlights)","text":""},{"location":"architecture/#during-ban-phase","title":"During Ban Phase","text":"<ul> <li>Objective combo bans: Must specify both Map and Objective Mode</li> <li>Slayer map bans: Map only, but map must support Slayer mode</li> <li>Turn enforcement: Teams must alternate (A\u2192B\u2192A\u2192B\u2192A\u2192B\u2192A)</li> </ul>"},{"location":"architecture/#during-pick-phase","title":"During Pick Phase","text":"<ul> <li>Objective picks: Map must allow the chosen Objective mode; banned Objective combos cannot be picked</li> <li>Slayer picks: Map must allow Slayer; banned Slayer maps cannot be picked</li> </ul>"},{"location":"architecture/#reuse-constraints","title":"Reuse Constraints","text":"<ul> <li>Slayer maps: The same map cannot be reused for different Slayer rounds</li> <li>Objective combos: The exact (Map + Objective Mode) cannot be reused; the map may still be used with a different objective mode</li> </ul>"},{"location":"architecture/#administrative-actions","title":"Administrative Actions","text":"<ul> <li>undo \u2014 deletes the last ban in BAN_PHASE or reopens the current/previous round in PICK_WINDOW</li> <li>reset \u2014 clears bans/rounds and returns the series to IDLE</li> </ul>"},{"location":"architecture/#data-flow-frontend-backend","title":"\ud83d\udce1 Data Flow (Frontend \u2192 Backend)","text":"<pre><code>sequenceDiagram\n    participant UI as Frontend (React)\n    participant API as Veto API\n    participant DB as Database\n\n    UI-&gt;&gt;API: POST /api/series/ (create series)\n    API-&gt;&gt;DB: Insert Series\n    API--&gt;&gt;UI: {id, state=IDLE}\n\n    UI-&gt;&gt;API: POST /series/{id}/assign_roles/\n    API-&gt;&gt;DB: Update Series teams\n    API--&gt;&gt;UI: state=SERIES_SETUP\n\n    UI-&gt;&gt;API: POST /series/{id}/confirm_tsd/\n    API-&gt;&gt;DB: Create SeriesRound slots\n    API--&gt;&gt;UI: state=BAN_PHASE, turn=A BAN OBJECTIVE\n\n    loop Ban Phase (7 steps)\n        UI-&gt;&gt;API: POST /series/{id}/ban_objective_combo/\n        API-&gt;&gt;DB: Insert SeriesBan\n        API--&gt;&gt;UI: turn=next team/type\n    end\n\n    loop Pick Phase\n        UI-&gt;&gt;API: POST /series/{id}/pick_slayer_map/\n        API-&gt;&gt;DB: Update SeriesRound\n        API--&gt;&gt;UI: turn=next team pick\n    end\n\n    Note over UI,API: Administrative actions available anytime\n    UI-&gt;&gt;API: POST /series/{id}/undo/\n    API-&gt;&gt;DB: Revert last ban or reopen round\n    API--&gt;&gt;UI: updated state/turn\n\n    UI-&gt;&gt;API: POST /series/{id}/reset/\n    API-&gt;&gt;DB: Delete bans &amp; rounds, reset state\n    API--&gt;&gt;UI: state=IDLE</code></pre>"},{"location":"architecture/#domain-model-essentials","title":"\ud83e\uddf1 Domain Model (Essentials)","text":""},{"location":"architecture/#core-models","title":"Core Models","text":"Model Purpose Key Fields Series Container for teams, state, and progress tracking <code>state</code>, <code>round_index</code>, <code>ban_index</code>, <code>turn</code> SeriesBan Immutable record of each ban during BAN_PHASE <code>series</code>, <code>order</code>, <code>kind</code>, <code>team</code> SeriesRound Per-game slot (Objective/Slayer) filled during picks <code>series</code>, <code>order</code>, <code>slot_type</code>, <code>picked_by</code> Action Audit log (ban/pick) for exports/analytics <code>series</code>, <code>step</code>, <code>action_type</code>, <code>team</code> Map Registry of available maps <code>name</code>, <code>modes</code> (M2M) GameMode Registry of game modes <code>name</code>, <code>is_objective</code>"},{"location":"architecture/#state-machine-fields","title":"State Machine Fields","text":"<ul> <li><code>state</code>: Current phase (IDLE, SERIES_SETUP, BAN_PHASE, PICK_WINDOW, SERIES_COMPLETE, ABORTED)</li> <li><code>turn</code>: Active team and expected action type (JSON: <code>{\"team\":\"A|B\",\"action\":\"BAN|PICK\",\"kind\":\"OBJECTIVE_COMBO|SLAYER_MAP\"}</code>)</li> <li><code>round_index</code>: Current game being configured (0-based)</li> <li><code>ban_index</code>: Current ban step (0-based, max 7)</li> </ul>"},{"location":"architecture/#quick-start","title":"\ud83d\ude80 Quick Start","text":"<ol> <li>Create Series: <code>POST /api/series/</code> \u2192 returns series with <code>state=IDLE</code></li> <li>Assign Teams: <code>POST /api/series/{id}/assign_roles/</code> \u2192 <code>state=SERIES_SETUP</code></li> <li>Configure Type: <code>POST /api/series/{id}/confirm_tsd/</code> \u2192 <code>state=BAN_PHASE</code></li> <li>Execute Bans: Follow 7-step ban schedule \u2192 <code>state=PICK_WINDOW</code></li> <li>Make Picks: Alternate team picks until complete \u2192 <code>state=SERIES_COMPLETE</code></li> </ol> <p>Use <code>undo</code> and <code>reset</code> endpoints for corrections during the process.</p>"}]}